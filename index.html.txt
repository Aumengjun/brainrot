<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Get code by collecting all 4 Brainrot characters</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .title {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .inventory {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            border: 2px solid rgba(255,255,255,0.2);
        }

        .inventory h3 {
            margin-bottom: 15px;
            font-size: 1.5rem;
        }

        .character-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 15px;
        }

        .character-card {
            background: rgba(255,255,255,0.2);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            border: 1px solid rgba(255,255,255,0.3);
            transition: transform 0.3s ease;
        }

        .character-card:hover {
            transform: translateY(-5px);
        }

        .character-emoji {
            font-size: 3rem;
            margin-bottom: 10px;
        }

        .character-name {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .character-count {
            color: #ffeb3b;
            font-weight: bold;
        }

        .game-area {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
            border: 2px solid rgba(255,255,255,0.2);
        }

        .score {
            text-align: center;
            margin-bottom: 20px;
        }

        .score-value {
            font-size: 2rem;
            font-weight: bold;
            color: #ffeb3b;
        }

        .question-area {
            margin-bottom: 30px;
        }

        .question {
            font-size: 1.5rem;
            margin-bottom: 20px;
            text-align: center;
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
        }

        .options-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .option-btn {
            background: rgba(255,255,255,0.2);
            color: white;
            border: 2px solid rgba(255,255,255,0.3);
            padding: 15px;
            font-size: 1.1rem;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .option-btn:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

        .option-btn.selected {
            background: linear-gradient(45deg, #4caf50, #66bb6a);
            border-color: #4caf50;
        }

        .option-btn.correct {
            background: linear-gradient(45deg, #4caf50, #66bb6a);
            border-color: #4caf50;
        }

        .option-btn.incorrect {
            background: linear-gradient(45deg, #f44336, #ef5350);
            border-color: #f44336;
        }

        .option-btn:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }

        .btn {
            background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
            color: white;
            border: none;
            padding: 12px 30px;
            font-size: 1.1rem;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 5px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .lucky-draw {
            text-align: center;
            margin-top: 30px;
        }

        .card-selection {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .draw-card {
            width: 120px;
            height: 160px;
            background: linear-gradient(135deg, #ffd700, #ffed4a);
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 3px solid rgba(255,255,255,0.3);
            position: relative;
            overflow: hidden;
        }

        .draw-card:hover {
            transform: scale(1.05);
            box-shadow: 0 10px 25px rgba(0,0,0,0.3);
        }

        .draw-card::before {
            content: '?';
            position: absolute;
            font-size: 4rem;
            color: #333;
            font-weight: bold;
        }

        .feedback {
            text-align: center;
            margin: 20px 0;
            font-size: 1.2rem;
            font-weight: bold;
        }

        .correct {
            color: #4caf50;
        }

        .incorrect {
            color: #f44336;
        }

        .win-message {
            background: linear-gradient(135deg, #ffd700, #ffed4a);
            color: #333;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            font-size: 1.5rem;
            font-weight: bold;
            margin-top: 20px;
            border: 3px solid #ffd700;
        }

        .password {
            font-size: 2rem;
            color: #ff6b6b;
            margin-top: 15px;
            font-family: monospace;
        }

        @media (max-width: 600px) {
            .title {
                font-size: 1.8rem;
            }
            
            .character-grid {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            }
            
            .options-container {
                grid-template-columns: 1fr;
            }
            
            .card-selection {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">Get code by collecting all 4 Brainrot characters</h1>
        </div>

        <div class="inventory">
            <h3>üéí Character Inventory</h3>
            <div class="character-grid" id="inventory">
                <div style="text-align: center; color: rgba(255,255,255,0.6); grid-column: 1/-1;">
                    No characters collected yet. Answer questions correctly to earn points!
                </div>
            </div>
        </div>

        <div class="game-area">
            <div class="score">
                <div>Score: <span class="score-value" id="score">0</span></div>
            </div>

            <div class="question-area" id="questionArea">
                <div class="question" id="question"></div>
                <div class="options-container" id="optionsContainer"></div>

            </div>

            <div class="feedback" id="feedback"></div>

            <div class="lucky-draw" id="luckyDraw" style="display: none;">
                <h3>üéâ Lucky Draw Time! üéâ</h3>
                <p>Choose a card to reveal your character!</p>
                <div class="card-selection">
                    <div class="draw-card" onclick="drawCard(0)"></div>
                    <div class="draw-card" onclick="drawCard(1)"></div>
                    <div class="draw-card" onclick="drawCard(2)"></div>
                </div>
            </div>
        </div>

        <div class="win-message" id="winMessage" style="display: none;">
            üéâ Congratulations! You've collected all 4 Brainrot characters! üéâ
            <div class="password">The password for the black lock is 4489</div>
        </div>
    </div>

    <script>
        const characters = [
            { name: "Tralalero", emoji: "ü¶à", id: "tralalero" },
            { name: "Tung Sahur", emoji: "üèè", id: "tungsahur" },
            { name: "Ballerina Cappuccina", emoji: "‚òï", id: "cappuccina" },
            { name: "Bombardillo", emoji: "üêä", id: "bombardillo" }
        ];

        const questions = [
            { 
                question: "Simplify: 4x - 3y + 3x + y", 
                options: ["x - 2y", "7x - 2y", "7x + 4y", "x + 4y"], 
                correct: 1 
            },
            { 
                question: "Expand and simplify: 8x - 3(2x + 3y)", 
                options: ["14x - 9y", "2x + 9y", "2x - 9y", "6x - 9y"], 
                correct: 2 
            },
            { 
                question: "Expand and simplify: 6y - (3x + 2y)", 
                options: ["3x + 8y", "-3x + 8y", "3x + 4y", "-3x + 4y"], 
                correct: 3 
            },
            { 
                question: "Simplify: 5x + 2y - 3x + 4y", 
                options: ["2x + 6y", "8x + 6y", "2x - 2y", "8x - 2y"], 
                correct: 0 
            },
            { 
                question: "Expand and simplify: 4(2x - y) + 3x", 
                options: ["5x - 4y", "11x + 4y", "11x - 4y", "8x - y"], 
                correct: 2 
            },
            { 
                question: "Simplify: 7x - 2y - 5x + 6y", 
                options: ["12x + 4y", "2x + 4y", "2x - 8y", "12x - 8y"], 
                correct: 1 
            },
            { 
                question: "Expand and simplify: 3(x + 2y) - 2x", 
                options: ["5x + 6y", "x - 6y", "5x - 6y", "x + 6y"], 
                correct: 3 
            },
            { 
                question: "Simplify: 9y - 4x + 2x - 3y", 
                options: ["2x + 6y", "-2x + 12y", "2x + 12y", "-2x + 6y"], 
                correct: 3 
            },
            { 
                question: "Expand and simplify: 2(3x - 4y) + 5y", 
                options: ["6x + y", "6x - 13y", "5x - 3y", "6x - 3y"], 
                correct: 3 
            },
            { 
                question: "Simplify: 6x + 8y - 4x - 3y", 
                options: ["10x + 5y", "2x + 5y", "2x + 11y", "10x + 11y"], 
                correct: 1 
            },
            { 
                question: "Expand and simplify: 5x - 2(x + 3y)", 
                options: ["7x - 6y", "3x + 6y", "3x - 6y", "5x - 6y"], 
                correct: 2 
            },
            { 
                question: "Simplify: 3y + 7x - 2y + x", 
                options: ["6x + y", "8x + 5y", "6x + 5y", "8x + y"], 
                correct: 3 
            },
            { 
                question: "Expand and simplify: 4(x - y) - 3x + 2y", 
                options: ["7x - 2y", "x + 6y", "x - 2y", "7x + 6y"], 
                correct: 2 
            },
            { 
                question: "Simplify: 10x - 6y + 2x - 4y", 
                options: ["12x - 10y", "8x - 10y", "12x - 2y", "8x - 2y"], 
                correct: 0 
            },
            { 
                question: "Expand and simplify: 3x + 2(4y - x)", 
                options: ["5x + 8y", "x - 8y", "x + 8y", "5x - 8y"], 
                correct: 2 
            },
            { 
                question: "Simplify: 8a + 5b - 3a - 2b", 
                options: ["5a + 3b", "11a + 3b", "5a + 7b", "11a + 7b"], 
                correct: 0 
            },
            { 
                question: "Expand and simplify: 2(3m + 4n) - 5m", 
                options: ["m + 8n", "11m + 8n", "m - 8n", "11m - 8n"], 
                correct: 0 
            },
            { 
                question: "Simplify: 12p - 7q + 3p - 8q", 
                options: ["15p - 15q", "9p - 15q", "15p + q", "9p + q"], 
                correct: 0 
            },
            { 
                question: "Expand and simplify: 5(2r - 3s) + 4r", 
                options: ["14r - 15s", "6r - 15s", "14r + 15s", "6r + 15s"], 
                correct: 0 
            },
            { 
                question: "Simplify: 9t + 6u - 4t + 2u", 
                options: ["5t + 8u", "13t + 8u", "5t + 4u", "13t + 4u"], 
                correct: 0 
            },
            { 
                question: "Expand and simplify: 7v - 3(2v + w)", 
                options: ["v - 3w", "13v - 3w", "v + 3w", "13v + 3w"], 
                correct: 0 
            },
            { 
                question: "Simplify: 4x + 9y - 6x + 3y", 
                options: ["-2x + 12y", "10x + 12y", "-2x + 6y", "10x + 6y"], 
                correct: 0 
            },
            { 
                question: "Expand and simplify: 6(a + 2b) - 4a", 
                options: ["2a + 12b", "10a + 12b", "2a - 12b", "10a - 12b"], 
                correct: 0 
            },
            { 
                question: "Simplify: 11c - 8d - 7c + 5d", 
                options: ["4c - 3d", "18c - 3d", "4c - 13d", "18c - 13d"], 
                correct: 0 
            },
            { 
                question: "Expand and simplify: 3e + 4(2f - e)", 
                options: ["-e + 8f", "7e + 8f", "-e - 8f", "7e - 8f"], 
                correct: 0 
            }
        ];

        let score = 0;
        let inventory = {};
        let currentQuestion = null;
        let gameWon = false;
        let selectedOption = null;
        let answerSubmitted = false;

        function initGame() {
            nextQuestion();
            updateDisplay();
        }

        function nextQuestion() {
            if (gameWon) return;
            
            currentQuestion = questions[Math.floor(Math.random() * questions.length)];
            selectedOption = null;
            answerSubmitted = false;
            
            document.getElementById('question').textContent = currentQuestion.question;
            document.getElementById('feedback').textContent = '';
            
            const optionsContainer = document.getElementById('optionsContainer');
            optionsContainer.innerHTML = currentQuestion.options.map((option, index) => `
                <button class="option-btn" onclick="selectOption(${index})" id="option${index}">
                    ${option}
                </button>
            `).join('');
        }

        function selectOption(optionIndex) {
            if (answerSubmitted) return;
            
            selectedOption = optionIndex;
            
            // Remove previous selections
            document.querySelectorAll('.option-btn').forEach(btn => {
                btn.classList.remove('selected');
            });
            
            // Mark selected option
            document.getElementById(`option${optionIndex}`).classList.add('selected');
            
            // Submit answer automatically after selection
            setTimeout(() => {
                submitAnswer();
            }, 500);
        }

        function submitAnswer() {
            if (gameWon || answerSubmitted || selectedOption === null) return;
            
            answerSubmitted = true;
            const correctAnswer = currentQuestion.correct;
            const feedback = document.getElementById('feedback');
            
            // Disable all option buttons
            document.querySelectorAll('.option-btn').forEach((btn, index) => {
                btn.disabled = true;
                if (index === correctAnswer) {
                    btn.classList.add('correct');
                } else if (index === selectedOption && index !== correctAnswer) {
                    btn.classList.add('incorrect');
                }
            });
            
            if (selectedOption === correctAnswer) {
                score += 3;
                feedback.textContent = `Correct! +3 points`;
                feedback.className = 'feedback correct';
            } else {
                score = Math.max(0, score - 2);
                feedback.textContent = `Incorrect. -2 points`;
                feedback.className = 'feedback incorrect';
            }
            
            updateDisplay();
            
            if (score >= 10) {
                setTimeout(() => {
                    startLuckyDraw();
                }, 2000);
            } else {
                // Auto-move to next question after showing feedback
                setTimeout(() => {
                    nextQuestion();
                }, 2500);
            }
        }

        function startLuckyDraw() {
            document.getElementById('questionArea').style.display = 'none';
            document.getElementById('luckyDraw').style.display = 'block';
            score = 0;
            updateDisplay();
        }

        function drawCard(cardIndex) {
            // Get available characters (those with count less than 3)
            const availableCharacters = characters.filter(char => {
                const currentCount = inventory[char.id] ? inventory[char.id].count : 0;
                return currentCount < 3;
            });
            
            // If no characters are available (all at max 3), allow any character
            const charactersToChooseFrom = availableCharacters.length > 0 ? availableCharacters : characters;
            
            const randomCharacter = charactersToChooseFrom[Math.floor(Math.random() * charactersToChooseFrom.length)];
            
            if (inventory[randomCharacter.id]) {
                inventory[randomCharacter.id].count++;
            } else {
                inventory[randomCharacter.id] = {
                    ...randomCharacter,
                    count: 1
                };
            }
            
            // Show the drawn character
            const cards = document.querySelectorAll('.draw-card');
            cards[cardIndex].innerHTML = `
                <div style="text-align: center;">
                    <div style="font-size: 3rem;">${randomCharacter.emoji}</div>
                    <div style="font-size: 0.8rem; color: #333; font-weight: bold;">${randomCharacter.name}</div>
                </div>
            `;
            
            // Disable all cards
            cards.forEach(card => {
                card.style.pointerEvents = 'none';
                card.style.opacity = '0.7';
            });
            
            setTimeout(() => {
                updateDisplay();
                checkWinCondition();
                
                if (!gameWon) {
                    document.getElementById('questionArea').style.display = 'block';
                    document.getElementById('luckyDraw').style.display = 'none';
                    
                    // Reset cards
                    cards.forEach(card => {
                        card.innerHTML = '';
                        card.style.pointerEvents = 'auto';
                        card.style.opacity = '1';
                    });
                    
                    nextQuestion();
                }
            }, 2000);
        }

        function checkWinCondition() {
            const uniqueCharacters = Object.keys(inventory).length;
            if (uniqueCharacters >= 4) {
                gameWon = true;
                document.getElementById('winMessage').style.display = 'block';
                document.getElementById('questionArea').style.display = 'none';
                document.getElementById('luckyDraw').style.display = 'none';
            }
        }

        function updateDisplay() {
            document.getElementById('score').textContent = score;
            
            const inventoryElement = document.getElementById('inventory');
            const inventoryKeys = Object.keys(inventory);
            
            if (inventoryKeys.length === 0) {
                inventoryElement.innerHTML = `
                    <div style="text-align: center; color: rgba(255,255,255,0.6); grid-column: 1/-1;">
                        No characters collected yet. Answer questions correctly to earn points!
                    </div>
                `;
            } else {
                inventoryElement.innerHTML = inventoryKeys.map(key => {
                    const char = inventory[key];
                    return `
                        <div class="character-card">
                            <div class="character-emoji">${char.emoji}</div>
                            <div class="character-name">${char.name}</div>
                            <div class="character-count">x${char.count}</div>
                        </div>
                    `;
                }).join('');
            }
        }

        // Initialize the game
        initGame();
    </script>
</body>
</html>